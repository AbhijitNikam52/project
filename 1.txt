Server.java

import java.rmi.*;

public class Server{
  public static void main(String[] args){
    try{
      ServerImpl serverImpl = new ServerImpl();
      Naming.rebind("Server", serverImpl);

      System.out.println("Server Started.....");
    }catch(Exception e){
      System.out.println("Exception occured at server" + e.getMessage());
    }
  }
}

-------------------------------------------------
Client.java

import java.rmi.*;
import java.util.Scanner;

public class Client{
  public static void main(String[] args){
    Scanner sc = new Scanner(System.in);

    try{
      String serverURL = "rmi://localhost/Server";
      ServerIntf serverIntf = (ServerIntf) Naming.lookup(serverURL);

      System.out.print("Enter First Number:");
      double num1 = sc.nextDouble();

      System.out.print("Enter Second Number:");
      double num2 = sc.nextDouble();

      System.out.println("First number is: " + num1);
      System.out.println("Second number is: " + num2);

      System.out.println("----------- Results -----------");
      System.out.println("Addition is " + serverIntf.Addition(num1, num2));
      System.out.println("Subtraction is " + serverIntf.Subtraction(num1, num2));
      System.out.println("Multiplication is " + serverIntf.Multiplication(num1, num2));
      System.out.println("Division is " + serverIntf.Division(num1, num2));

    }catch(Exception e){
       System.out.println("Exception occured at client" + e.getMessage());
    }
  }
}

-----------------------------------------------------------
ServerIntf.java

import java.rmi.*;

interface ServerIntf extends Remote{
  public double Addition(double num1, double num2) throws RemoteException;
  public double Subtraction(double num1, double num2) throws RemoteException;
  public double Multiplication(double num1, double num2) throws RemoteException;
  public double Division(double num1, double num2) throws RemoteException;
}

-----------------------------------------------------------
ServerImpl.java

import java.rmi.*;
import java.rmi.server.*;

public class ServerImpl extends UnicastRemoteObject implements ServerIntf{

  public ServerImpl() throws RemoteException{
  }

  public double Addition(double num1, double num2) throws RemoteException{
    return num1 + num2;    
  }

  public double Subtraction(double num1, double num2) throws RemoteException{
    return num1 - num2;    
  }

  public double Multiplication(double num1, double num2) throws RemoteException{
    return num1 * num2;    
  }

  public double Division(double num1, double num2) throws RemoteException{
    if(num2 != 0){
        return num1 / num2;  
    }

    else{
      System.out.println("Cannot Divide a number by Zero");
    }
      return num1 / num2;
  }
}

--------------------------------------------------------------
1)javac *.java
  rmiregistry

2)java Server

3)java Client
--------------------------------------------------------------
java -version
javac -version (download jdk for windows, Oracle->.exe  164.31MB Open JDK 11.0.18)
download java for windows 2.2MB

rmiregistry path-> C -> Prog.Files -> Java -> JDK -> bin -> copy path
system settings -> envi. variables -> delete Java tool options
-> path(double click) -> bin client delete -> new -> paste (2 times)

--------------------------------------------------------------
RMI provides communication between java applications that are deployed on different servers and connected remotely using objects called stub and skeleton.
RMI REGISTRY is a remote object registry, a Bootstrap naming service, that is used by RMI SERVER on the same host to bind remote objects to names.
Clients on local and remote hosts then look up the remote objects and make remote method invocations.

Remote object: This is an object in a specific JVM whose methods are exposed so they could be invoked by another program deployed on a different JVM.
Remote interface: This is a Java interface that defines the methods that exist in a remote object. A remote object can implement more than one remote interface to adopt multiple remote interface behaviors.
RMI: This is a way of invoking a remote object's methods with the help of a remote interface. It can be carried with a syntax that is similar to the local method invocation.
Stub: This is a Java object that acts as an entry point for the client object to route any outgoing requests. It exists on the client JVM and represents the handle to the remote object.
If any object invokes a method on the stub object, the stub establishes RMI by following these steps:
1. It initiates a connection to the remote machine JVM.
2. It marshals (write and transmit) the parameters passed to it via the remote JVM.
3. It waits for a response from the remote object and unmarshals (read) the returned value or exception, then it responds to the caller with that value or exception.
Skeleton: This is an object that behaves like a gateway on the server side. It acts as a remote object with which the client objects interact through the stub. This means that any requests coming from the remote client are routed through it. If the skeleton receives a request, it establishes RMI through these steps:
1. It reads the parameter sent to the remote method.
2. It invokes the actual remote object method.
3. It marshals (writes and transmits) the result back to the caller (stub).

Remote Method Invocation (RMI) allows you to build Java applications that are distributed among several machines. Remote Method Invocation (RMI) allows a Java object that executes on one machine to invoke a method of a Java object that executes on another machine.

Definition: A stub is a client-side proxy for the remote object. It acts as a local representative of the remote object and forwards method invocations to the actual remote object running on the server.
Definition: A skeleton is a server-side object responsible for dispatching incoming remote method calls to the actual remote object implementation. It receives method invocations from clients, processes them, and delegates the execution to the appropriate methods on the remote object.